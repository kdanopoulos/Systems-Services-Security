

Author: Konstantinos Danopoulos AM 2016030131



Όλα τα ερωρήματα σύμφωνα με την εκφώνιση έχουν υλοποιηθεί. Κάποιες φορές είχα πρόβλημα με τον compiler των linux του υπολογιστή μου (πχ. 1 καλούσα μια συνάρτηση και δεχόταν ώς όρισμα έναν integer και εντός της συνάρτησης προσπαθούσα να πάρω πρόσβαση στον integer αυτόν και ήταν διαφορετικός ο αριθμός από αυτόν που εισήγαγα αρχικά. 
πχ. 2 μια μεταβλητή εντός της main ακριβώς μια γραμμή κάτω από την αρχικοποίσή της είχε διαφορετική τιμή). Τρέχοταας τον ίδιο κώδικα σε windows μου έβγαζε πάντα τα σωστά αποτελέσματα. Για την υλοποίση των ερωτημάτων της εκφώνισης έχουν δημιουργηθεί οι εξής συναρτήσεις :

One-time pad
//-------------------------------------------------------------
void oneTimePadEncrypt(char * input,char * key,char * ptr);
void oneTimePadDecrypt(char * input,char * key,char *ptr);
//-------------------------------------------------------------

Caesar's cipher
//-------------------------------------------------------------
void caesarCipherEncrypt(char * input,int key,char *ptr);
void caesarCipherDecrypt(char * input,int key,char *ptr);
//-------------------------------------------------------------

Vigenère’s cipher
//-------------------------------------------------------------
void vigenereCipherEncrypt(char * input,char * key,char *ptr);
void vigenereCipherDecrypt(char * input,char * key,char *ptr);
//-------------------------------------------------------------

Αυτές οι παραπάνω 6 συναρτήσεις υλοποιούν τους αλγόριθμους κρυπτογράφισης και αποκρυπτογράφισης που ζητήθηκαν από την εκφώνιση. Δέχονται ώς όρισμα τον pointer ptr και αποθηκέυουν σε αυτόν το τελικό τους αποτέλεσμα. Στην συνέχεια φαίνονται κάποιες αλλές συναρτήσεις χρησιμότητας που χρειάστηκε να υλοποιθούν.   


//--------------- Help Functions -------------------

struct minMax findMinMax(char *input);   -> δέχεται ώς όρισμα έναν pointer char και υπολογίζει και επιστρέφει την μέγιστη και την ελάχιστη τιμή των χαρακτήρων σύμφωνα με  
                                            τον κώδικα ASCII (τα min και max που υπολογίζει χρησιμοποιούνται για την κανονικοποίηση του κρυπτογραφημένου κλειδιού της One-time pad εντός κάποιον ορίων του κωδικα ASCII ώστε να μπορεί να εκτυπωθεί).


void printEncryptedKey(int mySize,char * input,int a,int b);   -> δέχεται ώς όρισμα το κρυπτογραφημένο μήνυμα της One-time pad και το εκτυπώνει εφόσον πρώτα το     
                                                                  κανονικοποιήσει εντός των ορίων [a,b] που δέχεται ώς όρισμα. 

void getRandomKey(int length,char *ptr);  -> δέχεται ώς όρισμα το μέγεθος του τυχάιου κλειδιού που θα επιστρέψει με την χρήση του /dev/urandom. Το αποτέλεσμα το αποθηκεύει 
                                             στον pointer ptr.

char *inputString(FILE* fp, size_t size); -> χρησιμοποιείται αντί για το scanf ώστε να μπορούμε να πάρουμε από τον χρήστη είσοδο οποιουδήποτε μεγέθους. 

void demoOTP();  -> έτοιμη συνάρτηση ώστε να την καλεί απευθείας η main για να τρέξει τον αλγόριθμο One-time pad και τις εκτυπώσεις του σύμφωνα με την φόρμα της εκφώνισης. 

void demoCC();  -> έτοιμη συνάρτηση ώστε να την καλεί απευθείας η main για να τρέξει τον αλγόριθμο Caesar's cipher και τις εκτυπώσεις του σύμφωνα με την φόρμα της
                   εκφώνισης. 

void demoVC();  -> έτοιμη συνάρτηση ώστε να την καλεί απευθείας η main για να τρέξει τον αλγόριθμο Vigenère’s cipher και τις εκτυπώσεις του σύμφωνα με την φόρμα της 
                   εκφώνισης. 